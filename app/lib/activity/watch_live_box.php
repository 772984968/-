<?phpnamespace lib\activity;class watch_live_box extends activity{    const USER_ACTIVITY_STATUS_CACHE = 'user_activity_status_cache';        public static function join($row)    {        $check_rst = static::checkBaseInfo($row);        //检查通用的要求        if($check_rst !== true) {        }        static::reward($row);    }    //激活，观看直播奖励  ----   宝箱类    public static function activation_watch_live($parameter)    {        if(static::getActivity('watch_live')) {            throw new \Exception('有激活的宝箱还未打开');        }        //取用户进入直播时间        $into_time = \lib\wyim\chatroom::getUserIntoTime(static::$userModel->iid);        if(!$into_time) {            throw new \Exception('请先进入直播间,观看直播');        }        $time = $user_time = time() - $into_time;           //计算观看时长        $activitys = static::getActivityRows('watch_live'); //取直播间活动        $rst = [];        foreach ($activitys as $row) {            $a_parameter = $row['parameter'];            $check_rst = static::activationCheckBaseInfo($row);        //检查通用的要求            if($check_rst !== true) {                $rst[] = ['a_id'=>$row['iid'], 'rst'=>static::$error_meaning[$check_rst] ?? ''] ;                continue;            }            //检查这项活动特有的要求            if($time<$a_parameter->duration) {                $rst[] = ['a_id'=>$row['iid'], 'rst'=>'时间不够'.$a_parameter->duration.'秒不能激活'] ;                break;            }            if(static::activity($row)) {                $rst[] = ['a_id'=>$row['iid'], 'rst'=>'ok'] ;                break;            } else {                $rst[$row['iid']] = $rst[] = ['a_id'=>$row['iid'], 'rst'=>'激活失败'] ;;                break;            }        }        return $rst;    }    //获取，观看直播奖励    public static function execute_watch_live($parameter)    {        //取激活礼物的ID        $activity_id = static::getActivity('watch_live');        if(!$activity_id) {            throw new \Exception('没有激活的宝箱可以打开');        }        //取活动数据        $row = static::findOne($activity_id)->toArray();        $check_rst = static::checkBaseInfo($row);        if($check_rst !== true) {            //检测未通过            $rst[] = ['a_id'=>$row['iid'], 'rst'=>static::$error_meaning[$check_rst] ?? ''] ;;        }elseif(static::reward($row)) {            //领取成功            \lib\wyim\chatroom::cacheUserIntoTime(static::$userModel->iid);  //刷新用户进入时间            static::clearActivity('watch_live',static::$userModel->iid);     //消除缓存的礼物            $rst[] = ['a_id'=>$row['iid'], 'rst'=> 'ok'] ;;        } else {            $rst[] = ['a_id'=>$row['iid'], 'rst'=> '领取失败'] ;;        }        return $rst;    }    //激活检测  ----   宝箱类    private static function activationCheckBaseInfo($row)    {        //检测领取次数        $number = static::getstatus($row);        if($number >= $row['number_of_times']) { //达到了上领取上限            return 1;        }        if(strtotime($row['s_dt'])>time()) {            return 3;        }        if( $row['e_dt']<date('Y-m-d H:i:s', time()) ) {            return 4;        }        return true;    }    //激活礼物  ----   宝箱类    private static function activity($row) {        return Yii::$app->redis->HSET(static::USER_ACTIVITY_REWARD_STATUS.static::$userModel->iid, $row['event'],$row['iid']);    }    //取礼物激活状态  ----   宝箱类    public static function getActivity($event) {        return Yii::$app->redis->HGET(static::USER_ACTIVITY_REWARD_STATUS.static::$userModel->iid, $event);    }    //删除激活  ----   宝箱类    private static function clearActivity($event,$user_id)    {        $user_id = $user_id ? $user_id : static::$userModel->iid;        return Yii::$app->redis->HDEL(static::USER_ACTIVITY_REWARD_STATUS.$user_id, $event);    }    //取用户活动状态    public static function getstatus($activity) {        $rst = Yii::$app->redis->hget(static::USER_ACTIVITY_STATUS_CACHE.static::$userModel->iid, $activity['event'].$activity['iid']);        return $rst ?? '0';    }    //修改用户活动状态    public static function changestatus($activity) {        return Yii::$app->redis->hincrby(static::USER_ACTIVITY_STATUS_CACHE.static::$userModel->iid, $activity['event'].$activity['iid'],1);    }    //消除用户活动状态    public static function clearstatus($activity,$user_id=0) {        $user_id = $user_id ? $user_id : static::$userModel->iid;        return Yii::$app->redis->hdel(static::USER_ACTIVITY_STATUS_CACHE.$user_id, $activity['event'].$activity['iid']);    }    //刷新缓存状态   ----   宝箱类    public static function refurbishAll()    {        //取出所有活动        $activitys = static::find()->asArray()->all();        static::refurbish_jh($activitys);       //消除激活状态        static::refurbish_hd($activitys);       //消除活动状态    }    //----   宝箱类    public static function refurbish_hd(&$activitys)    {        $redis = Yii::$app->redis;        //取出所有 ‘领取记录键’        $keys = $redis->keys(static::USER_ACTIVITY_STATUS_CACHE.'*');        $start = strlen(static::USER_ACTIVITY_STATUS_CACHE);        foreach($keys as $key)        {            $user_id = substr($key,$start);            foreach($activitys as $activity)            {                if( !$activity['refresh_time'] || date('H',time())==date('H',strtotime($activity['refresh_time'])) ) {                    static::clearstatus($activity, $user_id);                }            }        }    }    //----   宝箱类    public static function refurbish_jh(&$activitys)    {        $redis = Yii::$app->redis;        //取出所有 ‘领取记录键’        $keys = $redis->keys(static::USER_ACTIVITY_REWARD_STATUS.'*');        $start = strlen(static::USER_ACTIVITY_REWARD_STATUS);        foreach($keys as $key)        {            $user_id = substr($key,$start);            foreach($activitys as $activity)            {                if( !$activity['refresh_time'] || date('H',time())==date('H',strtotime($activity['refresh_time'])) ) {                    static::clearActivity($activity['event'], $user_id);                }            }        }    }}