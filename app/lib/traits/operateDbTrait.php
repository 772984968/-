<?phpnamespace lib\traits;use yii\extend\AdCommon;use Yii;trait operateDbTrait{    private static $list_max_iid_key = 'max_iid_';    public static $key_name = 'iid';    public static function add($data) {        $model = new static();        foreach($data as $key => $value) {            $model->$key = $value;        }        if( $model->save() ) {            return $model->iid;        } else {            //\lib\models\CodeLog::addlog('title',$model->errors);            return false;        }    }    /**     * $where : 条件     * $isNext : 是下一页     * $pagesize : 一页的最大记录数     *     * 数据按IID 倒序,会缓存结果中的最小iid,为下一次查询，小于这个IID的数据     */    public static function list($where, $isNext, $with='', $pagesize=20, $join='', $select='')    {        $maxId = \Config::MAX_ID;        if($isNext) {            $maxId = static::getMaxIdCache($where);        }        $query= static::find();        if($with) {            $query->with($with);        }        if($join) {            switch ($join['type'])            {                case 'left':                    $query->leftJoin($join['table'], $join['on']);                    break;            }        }        if($select) {            $query->select($select);        }        $data = $query->where($where)            ->andWhere(static::$key_name.'<'.$maxId)            ->limit($pagesize)            ->orderBy(static::$key_name .' DESC')            ->asArray()            ->all();        $latIndex = count($data)-1;        $latIndex = $latIndex>=0 ? $latIndex : 0;        static::setMaxIdCache($where, $data[$latIndex]['iid'] ?? 0);        return $data;    }    //设置最大ID缓存    public static function setMaxIdCache($where, $value) {               return Yii::$app->getCache()->set(static::getMaxIdKeyName($where), $value, 3600);    }    //取最大ID缓存    public static function getMaxIdCache($where) {        return Yii::$app->getCache()->get(static::getMaxIdKeyName($where)) ?: 0;    }    //生成缓存名称    public static function getMaxIdKeyName($where) {        return static::$list_max_iid_key . str_replace('\\','',__CLASS__) . AdCommon::arrayToKeyValueString($where);    }}