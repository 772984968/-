<?phpnamespace lib\channel;use Yii;//比赛排行class matchRanking extends ranking{    protected static $name = 'match_ranking';    //添加钻石    public static function addDiamond($user_id, $number)    {        $redis = Yii::$app->redis;        //存在才添加        $result = $redis->zscore(static::$name, $user_id);        if(!is_null($result)) {            return $redis->zincrby(static::$name, $number*10, $user_id);        }        return 0;    }    //添加关注    public static function addFollow($user_id)    {        $redis = Yii::$app->redis;        $result = $redis->zscore(static::$name, $user_id);        if(!is_null($result)) {            return $redis->zincrby(static::$name, 100, $user_id);        }        return 0;    }    //减少关注    public static function subFollow($user_id)    {        $redis = Yii::$app->redis;        $result = $redis->zscore(static::$name, $user_id);        if(!is_null($result)) {            return $redis->zincrby(static::$name, -100, $user_id);        }        return 0;    }    //把所有比赛用户加入到比赛中    public static function load($number=10)    {        $redis = Yii::$app->redis;        $count = $redis->zcount(static::$name, 0, -1);        if($count == 0)        {            $data = Yii::$app->getDb()->createCommand("SELECT u.iid,u.follow_number FROM at_user as u RIGHT JOIN info ON u.iid=info.uid")->queryAll();            foreach($data as $row) {                if(!static::is_join($row['iid'])) {                    $redis->zincrby(static::$name, 100*$row['follow_number']+1, $row['iid']);                }            }        }    }    //检测用户是否参加了比赛    public static function add_takepart($user_id)    {        $data = Yii::$app->getDb()->createCommand("SELECT u.iid,u.follow_number FROM at_user as u RIGHT JOIN info ON u.iid=info.uid where u.iid='$user_id'")->queryOne();        if($data && !static::is_join($user_id)) {            Yii::$app->redis->zincrby(static::$name, 100*$data['follow_number']+1, $data['iid']);        }    }        //把这位用户加入到比赛中    public static function addUser($user_id) {        $redis = Yii::$app->redis;        $count = $redis->zcount(static::$name, 0, -1);        if($count == 0)        {            $row = Yii::$app->getDb()->createCommand("SELECT u.iid,u.follow_number FROM at_user where iid=$user_id")->queryOne();            if($row) {                $redis->zincrby(static::$name, 100*$row['follow_number'], $row['iid']);            }        }    }    public static function Arealist($user_id, $number = 14,$area) {        $ids = \lib\models\Info::getAreaUserId($area);        $newdata = [];        if($ids) {            $ids = implode(',', $ids);            $sql = "SELECT u.iid,head,nickname,vip_type,live_telecast_status,llaccounts,follow_number,fans_number,signature,f.iid AS mutual,c.cid,if(isnull(b.iid),0,1) AS buddy FROM at_user as u   LEFT JOIN at_fans AS f ON u.iid = f.user_id AND f.fans_id=$user_id LEFT JOIN at_channel AS c ON u.iid = c.user_id LEFT JOIN at_buddy as b ON b.user_id=u.iid AND b.buddy_id=$user_id WHERE u.iid IN($ids)";            $users = Yii::$app->getDb()->createCommand($sql)->queryAll();            foreach($users as $user) {                $user['head'] = \lib\nodes\UserNode::get_head_url($user['head']);                $user['live_telecast_status'] = \lib\wyim\channel::getStatus($user['cid']);                unset($user['cid']);                $user['mutual'] = $user['mutual'] ? '1' : '0';                $user['grade'] = static::getGrade($user['iid']);                $newdata[] = $user;            }            $newdata = static::orderByGrade($newdata);            $newdata = array_slice($newdata, 0, $number);        }        return $newdata;    }    //按人气值从高到底排    public static function orderByGrade(&$data)    {        $newdata = [];        while($data)        {            $max = 0;            $maxkey = 0;            foreach($data as $key => $row)            {                if($row['grade'] >= $max) {                    $max = $row['grade'];                    $maxkey = $key;                }            }            $newdata[] = $data[$maxkey];            unset($data[$maxkey]);        }        return $newdata;    }}