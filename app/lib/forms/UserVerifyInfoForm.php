<?phpnamespace lib\forms;use Yii;use lib\models\UserVerifyInfo;use yii\extend\AdCommon;use lib\models\User;//验证信息表单class UserVerifyInfoForm extends CaptchaForm{    public $iid;    public $target_id;    public $user_id;    const STATUS_REFUSE = 1;    const STATUS_AGREE = 2;    const STATUS_DEFAULT = 0;    public function scenarios()    {        return [            'adduser' => [                'target_id',                'user_id',            ],            'delete' => [                'iid',                'user_id',            ],            'refuse' => [                'iid',                'user_id',            ],            'agree' => [                'iid',                'user_id',            ],        ];    }    public function rules()    {        return [            [['iid', 'target_id', 'type', 'user_id'], 'required'],            [['iid', 'target_id', 'user_id'], 'integer'],            ['type', 'in', 'range' => [1]],        ];    }    public function attributeLabels()    {        return [        ];    }    //添加    public function adduser()    {        if($this->validate())        {            return $this->add(\Config::SEND_ADD_BUDDY, \Config::RECEIVE_ADD_BUDDY);        }    }    //添加申请    public function add($sendType, $receiveType)    {        if($this->user_id == $this->target_id) {            $this->addError('iid', '接收方不能是自己!');            return false;        }        if(UserVerifyInfo::findOne([            'user_id' => $this->user_id,            'target_id' => $this->target_id,            'type' => $sendType,            'status' => static::STATUS_DEFAULT,        ])) {            $this->addError('iid', '申请以提交,请耐心等待!');            return false;        }        if(!User::findOne($this->target_id)) {            $this->addError('iid', '接收方不存在!');            return false;        }        $t = Yii::$app->getDb()->beginTransaction();        $seldModel = new UserVerifyInfo();        $seldModel->target_id = $this->target_id;        $seldModel->user_id = $this->user_id;        $seldModel->type = $sendType;        if( !$seldModel->save() ) {            $t->rollBack();            $this->addError('iid', AdCommon::modelMessage($seldModel->errors));            return false;        }        $receiveModel = new UserVerifyInfo();        $receiveModel->target_id = $this->user_id;        $receiveModel->user_id = $this->target_id;        $receiveModel->is_ratify = 1;        $receiveModel->type = $receiveType;        $receiveModel->link_id = $seldModel->iid;        if( !$receiveModel->save() ) {            $t->rollBack();            $this->addError('iid', AdCommon::modelMessage($receiveModel->errors));            return false;        }        $t->commit();        return true;    }    //删除    public function delete()    {        if($this->validate())        {            $UserVerifyInfo = UserVerifyInfo::findOne(['iid'=>$this->iid, 'user_id'=>$this->user_id]);            if(!$UserVerifyInfo){                $this->addError('iid', '记录不存在!');                return false;            }                        if($UserVerifyInfo->delete()) {                return ['iid' => $this->iid];            } else {                $this->addError('iid', '删除失败!');                return false;            }        }    }    //拒绝    public function refuse(){        if($this->validate())        {            $UserVerifyInfo = UserVerifyInfo::findOne(['iid'=>$this->iid, 'user_id'=>$this->user_id, 'status'=>0]);            if(!$UserVerifyInfo){                $this->addError('iid', '记录不存在!');                return false;            }            if(!$UserVerifyInfo->is_ratify){                $this->addError('iid', '您是申请者,不能处理!');                return false;            }            //修改记录状态            $t = Yii::$app->getDb()->beginTransaction();            $UserVerifyInfo->status = static::STATUS_REFUSE;            if(!$UserVerifyInfo->save()) {                $this->addError('iid', Yii::t('common','fail'));                $t->rollBack();                return false;            }            //修改关联记录状态            $sourceInfo = UserVerifyInfo::findOne( $UserVerifyInfo->link_id );            if($sourceInfo)            {                $sourceInfo->status = static::STATUS_REFUSE;                if(!$sourceInfo->save()) {                    $this->addError('iid', Yii::t('common','fail'));                    $t->rollBack();                    return false;                }            }            $t->commit();            return true;        }    }    //同意    public function agree(){        if($this->validate())        {            $UserVerifyInfo = UserVerifyInfo::findOne(['iid'=>$this->iid, 'user_id'=>$this->user_id, 'status'=>0]);            if(!$UserVerifyInfo){                $this->addError('iid', '记录不存在!');                return false;            }            if(!$UserVerifyInfo->is_ratify){                $this->addError('iid', '您是申请者,不能处理!');                return false;            }            //修改记录状态为通过            $UserVerifyInfo->status = static::STATUS_AGREE;            $t = Yii::$app->getDb()->beginTransaction();            if(!$UserVerifyInfo->save()) {                $t->rollBack();                $this->addError('iid', Yii::t('common','fail'));                return false;            }            //修改关联记录状态            $sourceInfo = UserVerifyInfo::findOne( $UserVerifyInfo->link_id );            if($sourceInfo)            {                $sourceInfo->status = static::STATUS_AGREE;            }            else            {                $sourceInfo = new UserVerifyInfo();                $sourceInfo->user_id = $UserVerifyInfo->target_id;                $sourceInfo->target_id = $UserVerifyInfo->user_id;                $sourceInfo->status = static::STATUS_AGREE;            }            switch ($UserVerifyInfo->type)            {                case '2':                    $sourceInfo->type = 1;                    if(!$sourceInfo->save()) {                        $this->addError('iid', Yii::t('common','fail'));                        $t->rollBack();                        return false;                    }                    //添加好友                    if(!Yii::$app->factory->getuser()->addBuddy($UserVerifyInfo->target_id)) {                        $t->rollBack();                        $this->addError('iid', Yii::t('common','fail'));                        return false;                    }                    if(!Yii::$app->factory->createuser($UserVerifyInfo->target_id)                        ->addBuddy($this->user_id)) {                        $t->rollBack();                        $this->addError('iid', Yii::t('common','fail'));                        return false;                    }                    break;                default:                    $t->rollBack();                    $this->addError('iid', '没有这项信息类型!');                    return false;            }            $t->commit();            return true;        }    }    //常量意思    public static function constMeaning()    {        return [            static::STATUS_AGREE => '已通过',            static::STATUS_REFUSE => '已通过',            static::STATUS_DEFAULT => '等待对方同意',        ];    }            public function getList()    {        $data = UserVerifyInfo::find()                ->with(['userinfo'])                ->select('iid,type,is_ratify,status,create_time,target_id')                ->where(['user_id'=>$this->user_id])                ->orderBy('iid DESC')                ->limit(50)                ->asArray()                ->all();        if($data)        {            $constMeaning = \Config::typeMeaning();            foreach($data as $key => $row) {                $row['type'] = $constMeaning[$row['type']] ?? '';                $row['name'] = $row['userinfo']['nickname'] ?? '';                $row['head'] = $row['userinfo']['head'] ?? '';                unset($row['userinfo']);                $data[$key] = $row;            }        }        return $data;    }}