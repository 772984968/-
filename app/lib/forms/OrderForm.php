<?phpnamespace lib\forms;use Yii;use lib\models\Order;use lib\models\Member;use yii\extend\AdCommon;use lib\models\User;class OrderForm extends CaptchaForm{    public $product;    //商品    public $type;       //类型    public $user_id;    public $orderId;    //定单ID    public $payType;    //支付类型    public $orderSn;    public function scenarios()    {        return [            'create' => [                'product',                'user_id',                'type',            ],            'pay' => [                'orderId',                'payType',            ],            /*'payOk' => [                'orderSn',            ]*/        ];    }    public function rules()    {        return [            [['user_id', 'product', 'orderId', 'payType'], 'required'],            [['user_id', 'product', 'orderId', 'type'], 'integer'],            ['payType', 'in', 'range' => ['alipay'] ],            ['type', 'in', 'range' => [0,1] ],        ];    }    //生成支付签名    public function pay()    {        if($this->validate())        {            $orderModel = Order::findOne(['iid'=>$this->orderId, 'user_id'=>$this->user_id]);            if(!$orderModel) {                $this->addError('orderId', '定单不存在!');                return false;            }            if($orderModel->status) {                $this->addError('orderId', '定单已支付!');                return false;            }            switch($orderModel->type)            {                case 0:                    $title = '联联VIP';                    break;                case 1:                    $title = '充值';                    break;            }            $sign = '';            switch ($this->payType)            {                case 'alipay':                    $bizcontent = "{\"body\":\"$title\","                        . "\"subject\": \"$title\","                        . "\"out_trade_no\": \"{$orderModel->order_sn}\","                        . "\"timeout_express\": \"1c\","                        . "\"total_amount\": \"{$orderModel->price}\","                        . "\"product_code\":\"QUICK_MSECURITY_PAY\""                        . "}";                    $order_sign = \lib\nodes\AlipayNode::signorder($bizcontent);                    $order_sign = str_replace('&amp;','&',$order_sign);                    $sign = $order_sign;                    break;                default:                    $this->addError('orderId', '支付方式,不支持!');                    return false;                    break;            }            return ['sign'=>$sign];        }    }    //创建定单    public function create()    {        if($this->validate())        {            $orderModel = new Order();            $orderModel->order_sn = $this->createSn();            $orderModel->user_id = $this->user_id;            $orderModel->product = $this->product;            $orderModel->type = $this->type;            switch ($this->type)            {                case 0:                    //会员                    $memberRow = Member::getCacheRow($this->product);                    if(!$memberRow) {                        $this->addError('product', '会员类型不存在');                        return false;                    }                    $userModel = \lib\models\User::findOne($this->user_id);                    $orderModel->price = $userModel->inviteCode ? $memberRow['invite_price'] : $memberRow['price'];                    break;                case 1:                    //钱包                    $orderModel->price = $this->product;                    break;            }            if($orderModel->save()) {                $this->setScenario('pay');                $this->payType = 'alipay';                $this->orderId = $orderModel->iid;                $result = $this->pay();                return $result;            } else {                $this->addError(AdCommon::modelMessage($orderModel->errors));                return false;            }        }    }    //创建定单号    private function createSn()    {        return time().mt_rand(1000,9999).$this->user_id;    }}