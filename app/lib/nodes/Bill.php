<?phpnamespace lib\nodes;use lib\models\UserDiamondLog;use lib\models\UserWalletLog;use lib\vendor\imagine\Filter\Basic\Paste;use Yii;class Bill{    public $nextpage=0;    public $user_id;    const PAGE_SIZE = 10;    const MAXID_CACHE_NAME = 'max_id_cache_name_';    public function list() {        if(!$this->nextpage) {            $DiamondLog = $this->getList('\lib\models\UserDiamondLog');            $WalletLog = $this->getList('\lib\models\UserWalletLog');        } else {            $maxIdArr = $this->getMaxid();            $DiamondLog = $this->getList('\lib\models\UserDiamondLog', $maxIdArr['diamond'] ?? 0);            $WalletLog = $this->getList('\lib\models\UserWalletLog', $maxIdArr['wallet'] ?? 0);        }        $data =  $this->merger(['diamond'=>$DiamondLog, 'wallet'=>$WalletLog]);       return $this->explain($data);    }    //解释意义    private function explain($data) {        $addNoteType = 10009;        $classify = ['diamond'=> '钻石','wallet'=>'现金'];        $walletLogMeaning = \Config::walletLogMeaning();        foreach($data as $key => $row) {            $row['title'] = $walletLogMeaning[$row['type']] ?? '';            if($row['title'] == $addNoteType) {                $row['title'] .= $row['note'];            }            $row['classify'] = $classify[ $row['classify']];            unset($row['user_id']);            unset($row['iid']);            unset($row['source_user_id']);            unset($row['note']);            $data[$key] = $row;        }        return $data;    }    private function getList($class, $maxId = 999999999) {        return $class::find()            ->where("user_id={$this->user_id} AND iid<$maxId")            ->orderBy('iid DESC')            ->limit(static::PAGE_SIZE)            ->asArray()            ->all();    }    //合并    private function merger($logArr) {        $maxIdArr = [];        $row_number = 0;        $data = [];             //存放合并后的数据        while(true) {            foreach($logArr as $key => $arr) {                if(empty($arr)) {                    unset($logArr[$key]);                }            }            if(empty($logArr)) {                break;            }            $newlog = ['key'=>'','date'=>''];            foreach($logArr as $key => $arr) {                $row = current($arr);                if($row['create_time'] > $newlog['date']) {                    $newlog['key'] = $key;                    $newlog['date'] = $row['create_time'];                }            }            $rowdata = array_shift($logArr[$newlog['key']]);            $rowdata['classify'] = $newlog['key'];            $data[] = $rowdata;            $maxIdArr[$newlog['key']] = $rowdata['iid'];            $row_number++;            if($row_number >= static::PAGE_SIZE) {                break;            }        }        $this->setMaxid($maxIdArr);        return $data;    }    //设置最大ID    private function setMaxid($maxId) {        Yii::$app->getCache()->set(static::MAXID_CACHE_NAME.$this->user_id, $maxId);    }    //取最大ID    private function getMaxid() {        return Yii::$app->getCache()->get(static::MAXID_CACHE_NAME.$this->user_id);    }}?>